{"version":3,"file":"component---src-templates-blog-post-js-229c8da04b9effb36e2b.js","mappings":"uJA0DA,IA/CY,KAAO,IAAD,EAChB,MAAMA,GAAOC,EAAAA,EAAAA,gBAAe,cAkBtBC,EAA+B,QAAzB,EAAGF,EAAKG,KAAKC,oBAAY,aAAtB,EAAwBF,OAGvC,OACE,uBAAKG,UAAU,QAWZH,aAAM,EAANA,EAAQI,OACP,yBACE,+BAASJ,aAAM,EAANA,EAAQK,UAAW,MAC5B,4BAAM,IAAOP,EAAKG,KAAKC,aAAaI,cAMpC,C,uHC/CV,MAwDaC,EAAO,IAAyC,IAAtCT,MAAQU,eAAgBC,IAAQ,EACrD,OACE,gBAAC,IAAG,CACFC,MAAOD,EAAKE,YAAYD,MACxBJ,YAAaG,EAAKE,YAAYL,aAAeG,EAAKG,SAClD,EAIN,UAjEyB,IAGlB,IAAD,MAFJd,MAAM,SAAEe,EAAQ,KAAEC,EAAI,KAAEb,EAAMO,eAAgBC,GAAM,SACpDM,GACD,EACC,MAAMC,GAA6B,QAAjB,EAAAf,EAAKC,oBAAY,aAAjB,EAAmBQ,QAAK,QAE1C,OACE,gBAAC,IAAM,CAACK,SAAUA,EAAUL,MAAOM,GACjC,2BACEb,UAAU,YACVc,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYV,EAAKE,YAAYD,OAC1C,yBAAID,EAAKE,YAAYS,OAEvB,2BACEC,wBAAyB,CAAEC,OAAQb,EAAKc,MACxCJ,SAAS,gBAEX,2BACA,8BACE,gBAAC,IAAG,QAGR,uBAAKhB,UAAU,iBACb,sBACEqB,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGhB,GACC,gBAAC,EAAAiB,KAAI,CAACC,GAAIlB,EAASmB,OAAOC,KAAMC,IAAI,QAAO,KACtCrB,EAASF,YAAYD,QAI9B,0BACGI,GACC,gBAAC,EAAAgB,KAAI,CAACC,GAAIjB,EAAKkB,OAAOC,KAAMC,IAAI,QAC7BpB,EAAKH,YAAYD,MAAM,SAM3B,C","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n// import { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          description\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  // const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      {/* <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      /> */}\n      {author?.name && (\n        <p>\n          <strong>{author?.summary || null}</strong>\n          <span>&nbsp;{data.site.siteMetadata.description}</span>\n          {/* <a href={`https://twitter.com/${social?.twitter || ``}`}>\n            You should follow them on Twitter\n          </a> */}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["data","useStaticQuery","author","site","siteMetadata","className","name","summary","description","Head","markdownRemark","post","title","frontmatter","excerpt","previous","next","location","siteTitle","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}