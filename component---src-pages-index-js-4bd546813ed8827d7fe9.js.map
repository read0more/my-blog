{"version":3,"file":"component---src-pages-index-js-4bd546813ed8827d7fe9.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n// import { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          description\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  // const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      {/* <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      /> */}\n      {author?.name && (\n        <p>\n          <strong>{author?.summary || null}</strong>\n          <span>{data.site.siteMetadata.description}</span>\n          {/* <a href={`https://twitter.com/${social?.twitter || ``}`}>\n            You should follow them on Twitter\n          </a> */}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n        Â© {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import React, { useState, useEffect } from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const [posts, setPosts] = useState(data.allMarkdownRemark.nodes)\n  const searchParams = new URLSearchParams(location.search)\n\n  // useEffect(() => {\n  //   if (searchParams.has(\"date\")) {\n  //     const date = searchParams.get(\"date\")\n  //     const filteredPosts = data.allMarkdownRemark.nodes.filter(post => {\n  //       const postDate = new Date(post.frontmatter.date)\n  //       return (\n  //         postDate.getFullYear() === parseInt(date.split(\"-\")[0]) &&\n  //         postDate.getMonth() + 1 === parseInt(date.split(\"-\")[1])\n  //       )\n  //     })\n  //     setPosts(filteredPosts)\n  //   }\n  // }, [searchParams, data.allMarkdownRemark.nodes])\n\n  // const postCountByDate = data.allMarkdownRemark.nodes.reduce((acc, post) => {\n  //   const date = new Date(post.frontmatter.date)\n  //   const key = `${date.getFullYear()}-${`0${date.getMonth() + 1}`.slice(-2)}`\n  //   acc[key] = (acc[key] || 0) + 1\n  //   return acc\n  // }, {})\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Bio />\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        <ol style={{ listStyle: `none` }}>\n          {posts.map(post => {\n            const title = post.frontmatter.title || post.fields.slug\n\n            return (\n              <li key={post.fields.slug}>\n                <article\n                  className=\"post-list-item\"\n                  itemScope\n                  itemType=\"http://schema.org/Article\"\n                >\n                  <header>\n                    <h2>\n                      <Link to={post.fields.slug} itemProp=\"url\">\n                        <span itemProp=\"headline\">{title}</span>\n                      </Link>\n                    </h2>\n                    <small>{post.frontmatter.date}</small>\n                  </header>\n                  <section>\n                    <p\n                      dangerouslySetInnerHTML={{\n                        __html: post.frontmatter.description || post.excerpt,\n                      }}\n                      itemProp=\"description\"\n                    />\n                  </section>\n                </article>\n              </li>\n            )\n          })}\n        </ol>\n        {/* <aside>\n          <ul>\n            {Object.entries(postCountByDate).map(([date, count]) => (\n              <li key={date} style={{ cursor: \"pointer\" }}>\n                <Link to={`/?date=${date}`}>\n                  {date} ({count})\n                </Link>\n              </li>\n            ))}\n          </ul>\n        </aside> */}\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"All posts\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["data","useStaticQuery","author","site","siteMetadata","className","name","summary","description","location","title","children","isRootPath","__PATH_PREFIX__","pathname","header","Link","to","Date","getFullYear","href","metaDescription","defaultTitle","content","property","social","twitter","siteTitle","posts","setPosts","useState","allMarkdownRemark","nodes","URLSearchParams","search","length","style","display","justifyContent","listStyle","map","post","frontmatter","fields","slug","key","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","excerpt","Head"],"sourceRoot":""}