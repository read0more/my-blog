{"version":3,"file":"component---src-pages-index-js-528467f3e5d7e2ebe424.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          description\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      {/* <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      /> */}\n      {author?.name && (\n        <p>\n          <strong>{author?.summary || null}</strong>\n          <p>{data.site.siteMetadata.description}</p>\n          {/* <a href={`https://twitter.com/${social?.twitter || ``}`}>\n            You should follow them on Twitter\n          </a> */}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n        Â© {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const [posts, setPosts] = React.useState(data.allMarkdownRemark.nodes)\n  const searchParams = new URLSearchParams(location.search)\n\n  React.useEffect(() => {\n    if (searchParams.has(\"date\")) {\n      const date = searchParams.get(\"date\")\n      const filteredPosts = data.allMarkdownRemark.nodes.filter(post => {\n        const postDate = new Date(post.frontmatter.date)\n        return (\n          postDate.getFullYear() === parseInt(date.split(\"-\")[0]) &&\n          postDate.getMonth() + 1 === parseInt(date.split(\"-\")[1])\n        )\n      })\n      setPosts(filteredPosts)\n    }\n  }, [searchParams])\n\n  const postCountByDate = data.allMarkdownRemark.nodes.reduce((acc, post) => {\n    const date = new Date(post.frontmatter.date)\n    const key = `${date.getFullYear()}-${`0${date.getMonth() + 1}`.slice(-2)}`\n    acc[key] = (acc[key] || 0) + 1\n    return acc\n  }, {})\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout\n      location={location}\n      title={siteTitle}\n      postCountByDate={postCountByDate}\n    >\n      <Bio />\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        <ol style={{ listStyle: `none` }}>\n          {posts.map(post => {\n            const title = post.frontmatter.title || post.fields.slug\n\n            return (\n              <li key={post.fields.slug}>\n                <article\n                  className=\"post-list-item\"\n                  itemScope\n                  itemType=\"http://schema.org/Article\"\n                >\n                  <header>\n                    <h2>\n                      <Link to={post.fields.slug} itemProp=\"url\">\n                        <span itemProp=\"headline\">{title}</span>\n                      </Link>\n                    </h2>\n                    <small>{post.frontmatter.date}</small>\n                  </header>\n                  <section>\n                    <p\n                      dangerouslySetInnerHTML={{\n                        __html: post.frontmatter.description || post.excerpt,\n                      }}\n                      itemProp=\"description\"\n                    />\n                  </section>\n                </article>\n              </li>\n            )\n          })}\n        </ol>\n        <aside>\n          <ul>\n            {Object.entries(postCountByDate).map(([date, count]) => (\n              <li key={date} style={{ cursor: \"pointer\" }}>\n                <Link to={`/?date=${date}`}>\n                  {date} ({count})\n                </Link>\n              </li>\n            ))}\n          </ul>\n        </aside>\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"All posts\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["Bio","_data$site$siteMetada","_data$site$siteMetada2","data","useStaticQuery","author","site","siteMetadata","social","React","className","name","summary","description","_ref","location","title","children","isRootPath","__PATH_PREFIX__","pathname","header","Link","to","Date","getFullYear","href","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","metaDescription","defaultTitle","content","property","twitter","siteTitle","posts","setPosts","allMarkdownRemark","nodes","searchParams","URLSearchParams","search","has","date","get","filteredPosts","filter","post","postDate","frontmatter","parseInt","split","getMonth","postCountByDate","reduce","acc","key","slice","length","Layout","style","display","justifyContent","listStyle","map","fields","slug","itemScope","itemType","itemProp","dangerouslySetInnerHTML","__html","excerpt","Object","entries","_ref2","count","cursor","Head","Seo"],"sourceRoot":""}